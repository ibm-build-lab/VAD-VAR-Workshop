{"version":3,"file":"component---src-pages-mdx-fields-slug-tsx-content-file-path-content-watsonx-watsonx-ai-107-md-ed4b9047482c888599bd.js","mappings":"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","sources":["webpack://vad-var-site/./content/Watsonx/WatsonxAI/107.md","webpack://vad-var-site/./src/pages/{mdx.fields__slug}.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    section: \"section\",\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    img: \"img\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    strong: \"strong\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"1\",\n    \"aria-labelledby\": \"integrating-vectordb-with-watsonxai-foundation-models\"\n  }, React.createElement(_components.h1, {\n    id: \"integrating-vectordb-with-watsonxai-foundation-models\"\n  }, \"Integrating VectorDB with watsonx.ai foundation models\"), \"\\n\", React.createElement(_components.p, null, \"This lab will show you how we can use watsonx.ai and a Vector Database together to solve a Retrieval Augmented Generation (RAG) use case. By combining watsonx.ai LLM's (Large Language Model) foundation models with an existing knowledge base of data we can provide insightful context for our watsonx foundation models when generating an answer; in this case we will make use of a PDF to provide additional context to prompts given to our watsonx.ai foundation model.\"), \"\\n\", React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"what-is-rag\"\n  }, React.createElement(_components.h2, {\n    id: \"what-is-rag\"\n  }, React.createElement(_components.a, {\n    href: \"#what-is-rag\"\n  }, \"What is RAG?\")), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxAI/images/107/1-Retrieval-Step.png\",\n    alt: \"RAG Retrieval Step Overview... image courtesy of scriv.ai\"\n  }), \"\\n\", React.createElement(_components.p, null, \"In the previous lab we discussed what RAG or Retrieval Augmented Generation is, for a quick recap, RAG is an AI framework for improving the quality of LLM-generated responses by grounding the model on external sources of knowledge to supplement the LLMâ€™s internal representation of information.\"), \"\\n\"), React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"what-are-embeddings-and-why-use-a-vectordb\"\n  }, React.createElement(_components.h2, {\n    id: \"what-are-embeddings-and-why-use-a-vectordb\"\n  }, React.createElement(_components.a, {\n    href: \"#what-are-embeddings-and-why-use-a-vectordb\"\n  }, \"What are embeddings and why use a VectorDB?\")), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxAI/images/107/2-Embedding.png\",\n    alt: \"Embeddings to language diagram.. image courtesy of scriv.ai\"\n  }), \"\\n\", React.createElement(_components.p, null, \"To set a baseline, a vector database (Vector DB) is specialized databases which is used for storing data in vectorized format, mostly commonly in the form of arrays with different pairs of numbers. The next question might be \", React.createElement(_components.em, null, \"Why use a Vector DB?\"), \"; to understand that we first need to understand what embeddings are. Human language is very complex, the human brain is capable of understanding when we use words that mean the same thing or understand that certain words belong to a specific group. For example, our brains are able to understand that \", React.createElement(_components.em, null, \"\\\"red\\\"\"), \" and \", React.createElement(_components.em, null, \"\\\"blue\\\"\"), \" are both colors despite them being different words, we can also understand that when someone uses the words \", React.createElement(_components.em, null, \"\\\"happy\\\"\"), \" and \", React.createElement(_components.em, null, \"\\\"joyful\\\"\"), \" they generally represent the same emotion or feeling depsite them being two very different words. Trying to explain that to a machine is very difficult, but LLM's try to mirror some of this complexity in their own way, through a complex understanding of numbers. In short, an LLM tries to understand human language in a format that makes sense to machines, groups of numbers. Without getting to complicated LLM's use a translator to convert human language into numbers that it can easily associate with, this translator is usually an embedding function, and the output is a vector of numbers known as \", React.createElement(_components.em, null, \"embeddings\"), \". A simple example of this might be the the phrase \", React.createElement(_components.em, null, \"\\\"Good morning\\\"\"), \" represented as the following \", React.createElement(_components.em, null, \"[34, 12, 234, 638, 12, ...]\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"While to humans, this might not make any sense, it's meaningful to a machine because these numbers represent a sort of comprehesion for a machine to properly understand human language. These vectors can be plotted on a graph as they can represent coordinates which can be plotted, from these coordinates we can determine how close two embeddings, \", React.createElement(_components.em, null, \"or two pieces of text\"), \", are to one another; this idea of closeness is a core principle behind \", React.createElement(_components.em, null, \"semantic search\"), \", which we use when we want to query or look through all of our stored embeddings for text \", React.createElement(_components.em, null, \"(or embeddings)\"), \" similar to our query. Now comes our VectorDB, it stores all of our embeddings \", React.createElement(_components.em, null, \"(along with associated metadata)\"), \" and conceptually acts as a plot of all of the vectors that we have stored; when we make a query against our VectorDB it can return the embeddings that are closest \", React.createElement(_components.em, null, \"(shortest distance)\"), \" to our query from the plot. A simple visual representation of this can be seen in the image below:\"), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxAI/images/107/3-Vector-Plots.jpg\",\n    alt: \"Vector coordinate plots... image courtesy of weaviate.io\"\n  }), \"\\n\"), React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"what-is-chroma-db\"\n  }, React.createElement(_components.h2, {\n    id: \"what-is-chroma-db\"\n  }, React.createElement(_components.a, {\n    href: \"#what-is-chroma-db\"\n  }, \"What is Chroma DB?\")), \"\\n\", React.createElement(_components.p, null, \"ChromaDB \", React.createElement(_components.em, null, \"(or Chroma)\"), \" is marketed as a database for building A.I applications, but at its core can be simplified as a database for storing vectorized data as embeddings. The distinction for embeddings is important because embeddings have emerged to become the A.I-native way to represent any kind of data (i.e. text, video, images), making them ideal for working with all kinds of A.I-powered tools and algorithms. One things that makes Chroma unique from other embeddings database is its lightweight nature allowing it to be run in-memory if there is no need persistence. Being lightweight also lends Chroma to be fast, easily scalable \", React.createElement(_components.em, null, \"(by supporting other traditional databases for persistence)\"), \" and easy to use SDKs integration using Python and Javascript.\"), \"\\n\"), React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"putting-it-all-together-rag-with-vectordb\"\n  }, React.createElement(_components.h2, {\n    id: \"putting-it-all-together-rag-with-vectordb\"\n  }, React.createElement(_components.a, {\n    href: \"#putting-it-all-together-rag-with-vectordb\"\n  }, \"Putting it all together... RAG with VectorDB\")), \"\\n\", React.createElement(_components.img, {\n    src: \"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxAI/images/107/4-RAG-Steps.png\",\n    alt: \"RAG Steps Diagram.. image courtesy of scriv.ai\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Now the we have enough background information, we can put it all together and try to understand from a high-level how the pieces for RAG using Vector DB fit together. As discussed previously, Retrieval Augmented Generation (RAG) is an approach used to improve the context provided to an LLM (Large Language Model) in generative AI use-cases, including chatbot and general question-answer applications. The vector database is used to enhance the input prompt passed to the LLM by adding additional context to the input query. Instead of passing the prompt directly to the LLM, \", React.createElement(_components.em, null, \"in this case watsonx.ai\"), \", in the RAG approach you follow the steps below:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Generate embeddings, which are output as vectors, from an existing dataset that serves as the knowledge base - This dataset, which adds additional context to the LLMs response, can come in the form of product documentation, research data, technical specifications, product catalog and descriptions, and even more.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Store the output embeddings from the previous step into a Vectorized database. Vectors are easy to index and can be queried very fast.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"When a user initiates a prompt, instead of passing it directly to the LLM, we augment it with additional context:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"The user prompt is passed into the same embedding model used for our dataset, returning a vector embedding representation of the query.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"This embedding is used as the query (semantic search) against the vector database, which returns similar vectors.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"These vectors are used to look up the content they relate to (if not embedded directly alongside the vectors as metadata).\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"This content is provided as context alongside the original user prompt, providing additional context to the LLM and allowing it to return an answer that is likely to be far more contextual than the standalone prompt.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"With all those pieces together you can complete a RAG use-case using Vector DB however, there other ways to complete RAG.\"), \"\\n\"), React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"comparing-with-watson-discovery\"\n  }, React.createElement(_components.h2, {\n    id: \"comparing-with-watson-discovery\"\n  }, React.createElement(_components.a, {\n    href: \"#comparing-with-watson-discovery\"\n  }, \"Comparing with Watson Discovery\")), \"\\n\", React.createElement(_components.p, null, \"In the \", React.createElement(_components.a, {\n    href: \"/watsonx/watsonxai/106\"\n  }, \"previous lab\"), \" we completed a RAG use-case using Watson Discovery; in this lab we make use of a Vector database instead. While both fo these techniques can be used to achieve the same thing, they differ in their approach. Watson Discovery is primarily used as a document understanding and analysis platform, this works out very well in scenarios where large numbers of documents are used or needed to make business decisions. For example, a large corporation sifting through larges amounts of company financial documents to determine insights before making a merger or acquisition; or a law firm sifting through briefings and other law documents to conduct legal research for legal precedents. Vector databases work a bit different by creating embeddings, or arrays of large numbers, from tokens of text which are then stored into a database and can be quickly referenced when a similar embedding query of user input is supplied to the vector database. Both solutions achieve the same results for determining context, however they way they are impletmented is their biggest differentiator. With Watson Discovery, you can make use of a managed service and sleek UI to ingest and even annotate documents for future Natural Language queries; given its managed nature Watson Discovery also proves to be an easier tool to integrate into other servies using a simple API Key, Service URL, and Project ID; however, this simplicity comes at the cost of granular control. Vector databases can used as both as a managed \", React.createElement(_components.em, null, \"(i.e. PineconeDB)\"), \" or unmanaged \", React.createElement(_components.em, null, \"(i.e. ChromaDB)\"), \" service, unlike Watson Discovery which is only provided as a managed offering. Vector databases also provide more fine tuned controls such as using different embedding models (for vectorization) or tokenizers allowing users to customize the DB to better fit their unique use-case which can be much better approach the general one-size fits all approach of Watson Discovery. This additional controls, does come with added complexity making it harder to easily integrate VectorDB the same way you can with Watson Discovery. Overall both approaches are able to support the RAG model that is becoming popular with LLM's, since you have already completed RAG with Watson Discovery, this lab will explore doing the same with Vector databases.\"), \"\\n\"), React.createElement(_components.section, {\n    className: \"heading\",\n    \"data-heading-rank\": \"2\",\n    \"aria-labelledby\": \"run-the-vectordb--watsonxai-lab\"\n  }, React.createElement(_components.h2, {\n    id: \"run-the-vectordb--watsonxai-lab\"\n  }, React.createElement(_components.a, {\n    href: \"#run-the-vectordb--watsonxai-lab\"\n  }, \"Run the VectorDB + watsonx.ai lab\")), \"\\n\", React.createElement(_components.p, null, \"To run the lab for this section we will start by logging into the watsonx platform; after navigating to the watsonx home page \", React.createElement(_components.a, {\n    href: \"https://dataplatform.cloud.ibm.com/wx/home\"\n  }, \"here\"), \", we will want to open the Notebook editor that we can use to run the notebook associated with this lab.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"If you don't know how to acccess watsonx.ai or are unsure how to open to the notebook editor, follow \", React.createElement(_components.a, {\n    href: \"/watsonx/watsonxai/100#how-do-i-import-a-jupyter-notebook-in-watsonxai\"\n  }, \"this reference link\"), \" which will walk you through the process for accessing watsonx.ai and opening the Jupyter notebook editor.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Use the following values for this lab:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Name:\"), \" \", React.createElement(_components.code, null, \"{uniqueid}-rag-chromadb\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Notebook URL:\"), \" \", React.createElement(_components.code, null, \"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content/Watsonx/WatsonxAI/files/rag-with-chromadb.ipynb\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"After your notebook is launched and created, you can follow along and run through each cell of the notebook to complete the lab. The notebook contains comments explaining what code in each cell does as well as any necessary input that you might need to provide in order to successfully run a cell.\"), \"\\n\", React.createElement(_components.p, null, \"Good luck!\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/VAD-VAR-Workshop/VAD-VAR-Workshop/content/Watsonx/WatsonxAI/107.md\";\nimport React, {useRef, useState} from 'react';\nimport cx from 'classnames';\nimport SEO from '@components/SEO';\nimport PageHeader from '@components/PageHeader';\nimport MDXWrapper from '@components/MDXWrapper';\nimport ContentWrapper from '@components/ContentWrapper';\nimport TableOfContents from '@components/TableOfContents';\nimport * as styles from '@styles/pages/{mdx.fields__slug}.module.scss';\nconst Content = props => {\n  const {data: {mdx: {tableOfContents: {items: tocItems}, frontmatter: {toc = true, title, timeToComplete, updated}}}, children} = props;\n  const articleRef = useRef(null);\n  const {0: currSection} = useState('');\n  const showToc = (toc === null ? true : toc) && tocItems;\n  return React.createElement(React.Fragment, null, React.createElement(PageHeader, {\n    timeToComplete,\n    updated\n  }, tocItems[0].title || title || ''), React.createElement(ContentWrapper, {\n    className: styles.wrapper\n  }, React.createElement(\"article\", {\n    className: cx(styles.article, !showToc && styles.noToc),\n    ref: articleRef\n  }, React.createElement(MDXWrapper, {\n    components: {\n      h1: () => null\n    }\n  }, children)), showToc && React.createElement(TableOfContents, {\n    itemsList: tocItems,\n    maxDepth: 2,\n    currSection: currSection\n  })));\n};\nconst pageQuery = \"3587680389\";\nexport const Head = props => {\n  const {location: {pathname}, data: {mdx: {frontmatter: {title}, tableOfContents: {items}}}} = props;\n  return React.createElement(SEO, {\n    pathname,\n    title: title || items[0].title || undefined\n  });\n};\nContent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Content, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","section","h1","p","h2","a","img","em","ul","li","blockquote","strong","code","_provideComponents","components","React","className","id","href","src","alt","wrapper","MDXLayout","Content","data","mdx","tableOfContents","items","tocItems","frontmatter","toc","title","timeToComplete","updated","children","articleRef","useRef","currSection","useState","showToc","PageHeader","ContentWrapper","styles","cx","ref","MDXWrapper","TableOfContents","itemsList","maxDepth","Head","location","pathname","SEO","undefined","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}