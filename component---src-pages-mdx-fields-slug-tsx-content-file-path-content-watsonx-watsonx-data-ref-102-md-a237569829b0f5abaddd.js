"use strict";(self.webpackChunkvad_var_site=self.webpackChunkvad_var_site||[]).push([[4643],{17742:function(e,n,t){t.r(n),t.d(n,{Head:function(){return h},default:function(){return b}});var l=t(11151),a=t(67294);function r(e){const n=Object.assign({section:"section",h1:"h1",p:"p",strong:"strong",ul:"ul",li:"li",img:"img"},(0,l.ah)(),e.components);return a.createElement(n.section,{className:"heading","data-heading-rank":"1","aria-labelledby":"relevant-open-source-technologies"},a.createElement(n.h1,{id:"relevant-open-source-technologies"},"Relevant open source technologies"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"PrestoDB")),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Open Source, distributed SQL query engine, designed for fast analytics queries against data of any size"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Queries on data where it lives using ANSI SQL across federated and diverse sources"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Supports both relational and non-relational sources"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Also supports open source file types (ORC, Parquet, Avro, RCFile, SequenceFile, JSON, Text, CSV)"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Excellent for connecting business intelligence tools to various data sources"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Uses an architecture similar to classic massively parallel processing database management systems"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"One coordinator node working in sync with multiple worker nodes"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Query gets submitted to the coordinator which uses presto’s custom query and execution engine to parse, plan, and schedule a distributed query plan across the worker nodes"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Designed to support standard ANSI SQL semantics, including complex queries, aggregation, joins, left/right joins, subqueries, window functions, distinct counts, and approximate percentiles"),"\n"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Hive Metastore")),"\n",a.createElement(n.p,null,"Central storage point for all the meta-information about your data storages"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Central repository for lakehouse query engines"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Stores metadata information about connected tables, views, partitions, columns, and their respective schemas"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,"Stores information such as the schema of tables, their column names, types, and partitioning information"),"\n",a.createElement(n.p,null,"• This information is used by the query engines to optimize query execution and improve performance"),"\n",a.createElement(n.p,null,"• Tracks the location of data stored in the storage systems, making it easier for the query engine to access and process the data"),"\n",a.createElement(n.p,null,"• Typically implemented as a relational database, such as MySQL, PostgreSQL, or Oracle"),"\n",a.createElement(n.p,null,"• Handles concurrent access and provides high availability and fault tolerance"),"\n"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"File Formats")),"\n",a.createElement(n.img,{src:"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxData/images/ref/file-format.png",alt:""}),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Open Source Table Formats")),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Separation of compute, data, and storage"),"\n",a.createElement(n.li,null,"Leverage low-cost, infinitely scalable object storage"),"\n",a.createElement(n.li,null,"Standardized"),"\n"),"\n",a.createElement(n.p,null,"• open file formats (Parquet, ORC, DWRF, JSON, …)"),"\n",a.createElement(n.p,null,"• table formats (Apache Iceberg, LF Delta, Apache Hudi)"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"Accessed by scalable compute engines of choice (Presto, Spark, etc.)"),"\n"),"\n",a.createElement(n.img,{src:"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxData/images/ref/table-format.png",alt:""}),"\n",a.createElement(n.img,{src:"https://raw.githubusercontent.com/ibm-build-lab/VAD-VAR-Workshop/main/content//Watsonx/WatsonxData/images/ref/table-format-ops.png",alt:""}),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"ICEBERG")),"\n",a.createElement(n.p,null,"Open table format for huge analytic datasets"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Schema Evolution")," supports add, drop, update, or rename, and has no side-effects"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Hidden partitioning")," prevents user mistakes that cause silently incorrect results or extremely slow queries"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Partition layout evolution")," can update the layout of a table as data volume or query patterns change"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Time travel")," enables reproducible queries that use exactly the same table snapshot, or lets users easily examine changes"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Version rollback")," allows users to quickly correct problems by resetting tables to a good state"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Advanced filtering")," data files are pruned with partition and column-level stats, using table metadata"),"\n",a.createElement(n.p,null,"• Originally designed to solve correctness problems in eventually-consistent cloud object stores"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Works with any cloud store")," and reduces NN congestion when in HDFS, by avoiding listing and renames"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Serializable isolation")," table changes are atomic and readers never see partial or uncommitted changes"),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Multiple concurrent writers")," use optimistic concurrency and will retry to ensure that compatible updates succeed, even when writes conflict"),"\n"),"\n"))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},o=t(94184),c=t.n(o),i=t(24690),u=t(81140),m=t(48623),p=t(88531),d=t(13383),E=t(27315);const g=e=>{const{data:{mdx:{tableOfContents:{items:n},frontmatter:{toc:t=!0,title:l,timeToComplete:r,updated:s}}},children:o}=e,i=(0,a.useRef)(null),{0:g}=(0,a.useState)(""),h=(null===t||t)&&n;return a.createElement(a.Fragment,null,a.createElement(u.Z,{timeToComplete:r,updated:s},n[0].title||l||""),a.createElement(p.Z,{className:E.YS},a.createElement("article",{className:c()(E.Y2,!h&&E.ey),ref:i},a.createElement(m.Z,{components:{h1:()=>null}},o)),h&&a.createElement(d.Z,{itemsList:n,maxDepth:2,currSection:g})))},h=e=>{const{location:{pathname:n},data:{mdx:{frontmatter:{title:t},tableOfContents:{items:l}}}}=e;return a.createElement(i.Z,{pathname:n,title:t||l[0].title||void 0})};function b(e){return a.createElement(g,e,a.createElement(s,e))}}}]);
//# sourceMappingURL=component---src-pages-mdx-fields-slug-tsx-content-file-path-content-watsonx-watsonx-data-ref-102-md-a237569829b0f5abaddd.js.map